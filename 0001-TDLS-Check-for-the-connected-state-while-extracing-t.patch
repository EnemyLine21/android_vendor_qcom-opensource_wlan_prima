From 5675950c9aabada13511483baede171f95ae20e2 Mon Sep 17 00:00:00 2001
From: Pradeep Reddy POTTETI <c_ppotte@qti.qualcomm.com>
Date: Thu, 26 Jun 2014 16:07:06 +0530
Subject: [PATCH 1/4] TDLS: Check for the connected state while extracing the
 first peer.

commit I6dad95ce4f453d774b4f6bea99cccca46b95aa5f did not consider peer link
connection status while extracting first peer from the peer list.

Address this issue by checking if peer link status is connected.

Klockwork Issue: pAdapter NULL Pointer Dereference in
wlan_hdd_tdls_indicate_teardown function is also fixed as part of this
commit.

CRs-Fixed: 685956
Change-Id: I5ef55f91dd20c0bb934e9dad90fe901a63480853
---
 CORE/HDD/src/wlan_hdd_tdls.c | 11 ++++++++---
 1 file changed, 8 insertions(+), 3 deletions(-)

diff --git a/CORE/HDD/src/wlan_hdd_tdls.c b/CORE/HDD/src/wlan_hdd_tdls.c
index f3b8eab..d3afd58 100644
--- a/CORE/HDD/src/wlan_hdd_tdls.c
+++ b/CORE/HDD/src/wlan_hdd_tdls.c
@@ -1634,9 +1634,12 @@ hddTdlsPeer_t *wlan_hdd_tdls_get_first_connected_peer(hdd_adapter_t *pAdapter)
 
         list_for_each(pos, head) {
             curr_peer= list_entry (pos, hddTdlsPeer_t, node);
-            if (curr_peer)
+            if (curr_peer && (curr_peer->link_status == eTDLS_LINK_CONNECTED))
             {
                mutex_unlock(&pHddCtx->tdls_lock);
+               VOS_TRACE( VOS_MODULE_ID_HDD, TDLS_LOG_LEVEL,
+                          "%s: " MAC_ADDRESS_STR " eTDLS_LINK_CONNECTED",
+                           __func__, MAC_ADDR_ARRAY(curr_peer->peerMac));
                return curr_peer;
             }
         }
@@ -2486,7 +2489,7 @@ void wlan_hdd_tdls_indicate_teardown(hdd_adapter_t *pAdapter,
                                            hddTdlsPeer_t *curr_peer,
                                            tANI_U16 reason)
 {
-    hdd_context_t *pHddCtx = WLAN_HDD_GET_CTX(pAdapter);
+    hdd_context_t *pHddCtx;
 
     if (NULL == pAdapter || NULL == curr_peer)
     {
@@ -2495,6 +2498,8 @@ void wlan_hdd_tdls_indicate_teardown(hdd_adapter_t *pAdapter,
         return;
     }
 
+    pHddCtx = WLAN_HDD_GET_CTX(pAdapter);
+
     if (eTDLS_LINK_CONNECTED != curr_peer->link_status)
         return;
 
@@ -2504,7 +2509,7 @@ void wlan_hdd_tdls_indicate_teardown(hdd_adapter_t *pAdapter,
      * to be operational, explicitly make it false to enable
      * throughput monitor takes the control of split scan.
      */
-    if (pHddCtx->isTdlsScanCoexistence == TRUE)
+    if (pHddCtx && (pHddCtx->isTdlsScanCoexistence == TRUE))
     {
         pHddCtx->isTdlsScanCoexistence = FALSE;
     }
-- 
1.8.2.1

